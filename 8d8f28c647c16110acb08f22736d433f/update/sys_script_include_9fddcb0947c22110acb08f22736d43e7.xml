<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_sgc_enhan.SGCEnhanceCSV</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Helper class used to generate CSV formatted outputs</description>
        <mobile_callable>false</mobile_callable>
        <name>SGCEnhanceCSV</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var SGCEnhanceCSV = Class.create();
SGCEnhanceCSV.prototype = {
	initialize: function (streamWriter) {
		this.streamWriter = streamWriter;
		this.headers = [];
		this.rows = [];
		this.data = '';
	},

	addHeader: function () {
		for(var i = 0; i < arguments.length; i++){
			var name = arguments[i];
			if (this.headers.indexOf(name) < 0) {
				this.headers.push(name);
			}
		}
		gs.info(this.headers);
	},

	addRow: function (obj) {
		var row = {};
		for (var i = 0; i < this.headers.length; i++) {
			var header = this.headers[i];
			if (obj && obj[header]) {
				row[header] = obj[header];
			} else if(arguments[i] && typeof arguments[i] != 'object'){
				row[header] = arguments[i];
			} else {
				row[header] = '';
			}
		}
		this.rows.push(row);
		return this.rows[this.rows.length - 1];
	},

	build: function () {
		var headerAdded = false;
		//Add Headers
		if(this.headers.length > 0){
			this.streamWriter.writeString(this._buildHeaderString());
			headerAdded = true;
		}
		//Add Body
		this._buildBodyString(headerAdded);
	},

	buildDisplay: function(){
		var headerAdded = false;
		this.data = '';
		//Add Headers
		for (var i = 0; i < this.headers.length; i++) {
			headerAdded = true;
			var header = this.headers[i];
			if(i > 0){
				this.data += '\t';
			}
			this.data += header;
		}

		for(var r = 0; r < this.rows.length; r++ ){
			var row = this.rows[r];
			var rowString = '';
			if(headerAdded || r > 0){
				rowString += '\n';
			}
			var first = true;
			for(var key in row){
				if(!first){
					rowString += '\t';
				}
				first =false;
				rowString += row[key] || '';
			}
			this.data += rowString;
		}
		return this.data;
	},

	createAttachment: function(name, gr){
		var attachment = new GlideSysAttachment();

		if(!gr){
			gr = this._createPollRecord();
		}

		var fileName = name;
		if(!fileName){
			fileName = gr.getDisplayValue();
		}
		if(!fileName){
			fileName = gr.getUniqueValue() + '-' + new GlideDateTime().getDisplayValue();
		}

		var sysId = attachment.write(gr, fileName + '.csv', 'text/csv', this.data);
		if(sysId){
			var attachmentGr = new GlideRecord('sys_attachment');
			if(attachmentGr.get(sysId)){
				return attachmentGr;
			}
		}
	},



	//Internal Functions

	_buildHeaderString: function () {
		var headerStr = '';
		for (var i = 0; i < this.headers.length; i++) {
			var header = this.headers[i];
			var cell = this._buildCell(header);
			if (!headerStr) {
				headerStr = cell;
			} else {
				headerStr += ',' + cell; 
			}
		}
		return headerStr;
	},

	_buildBodyString: function(headerAdded){
		for(var i = 0; i < this.rows.length; i++){
			var row = this.rows[i];
			var rowString = '';
			if(headerAdded || i > 0){
				rowString += '\n';
			}
			if(headerAdded){
				rowString += this._buildRowString(row);
			}else{
				rowString += this._buildRowStringWithoutHeader(row);
			}
			this.streamWriter.writeString(rowString);
		}
	},

	_buildRowString: function(row){
		var rowString = '';
		for (var i = 0; i < this.headers.length; i++) {
			var header = this.headers[i];
			var cell = this._buildCell((row[header] || ''));
			if(i > 0){
				rowString += ',';
			}
			rowString += cell;
		}
		return rowString;
	},


	_buildRowStringWithoutHeader: function(row){
		var rowString = '';
		for(var key in row){
			var cell = this._buildCell((row[key] || ''));
			if(rowString){
				rowString += ',';
			}
			rowString += cell;
		}
		return rowString;
	},

	_buildCell: function(val){
		if(typeof val === 'object'){
			val = JSON.stringify(val);
		}
		if(typeof val === 'string'){
			val = val.replace(/"/g, '""');
		}
		val = '"' + val + '"';
		return val;
	},

	_createPollRecord: function(){
		var pollGr = new GlideRecord('sys_poll');
		pollGr.initialize();
		pollGr.session_id = gs.getSessionID();
		pollGr.session_user = gs.getUserID();
		pollGr.state = 'complete';
		pollGr.max = '0';
		pollGr.current = '0';
		pollGr.message = 'Created by the Developer Operations SGCEnhanceCSV Script include.';
		pollGr.insert();
		return pollGr;
	},


	type: 'SGCEnhanceCSV'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-05 15:44:18</sys_created_on>
        <sys_id>9fddcb0947c22110acb08f22736d43e7</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>SGCEnhanceCSV</sys_name>
        <sys_package display_value="SGC Enhancement Suite" source="x_156954_sgc_enhan">8d8f28c647c16110acb08f22736d433f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SGC Enhancement Suite">8d8f28c647c16110acb08f22736d433f</sys_scope>
        <sys_update_name>sys_script_include_9fddcb0947c22110acb08f22736d43e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-25 14:41:33</sys_updated_on>
    </sys_script_include>
</record_update>
