<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_sgc_enhan.SGCEnhanceConfigurationItem</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SGCEnhanceConfigurationItem</name>
        <script><![CDATA[var SGCEnhanceConfigurationItem = Class.create();
SGCEnhanceConfigurationItem.prototype = {
	initialize: function (configItemGr) {
		if (configItemGr) {
			if (typeof configItemGr === "string") {
				configItemGr = this._getGlideRecordWithId(configItemGr);
			}
			if (configItemGr + "" === "[object GlideRecord]") {
				this.setFromGr(configItemGr);
			}
		}
	},

	setFromGr: function (configItemGr) {
		this.sysId = configItemGr.getUniqueValue();
		this.name = configItemGr.getValue('name');
		this.className = configItemGr.getValue('sys_class_name');
		this.sources = this._getSources();
	},

	getFormDisplaySummary: function () {
		var formReport = new SGCEnhanceFormReport();
		formReport.setTitle('SGC Enhancement Suite - Source Summary');
		var mainSection = formReport.addSection('main');
		mainSection.addParagraph('List of all discovery sources that contribute to this CI. If there are multiple ID\'s listed under a single source, you should check the source data as the IRE has merged these two items together.');
		var mainUL = mainSection.addUnorderedList();
		for (var i = 0; i < this.sources.length; i++) {
			var source = this.sources[i];
			var text = '<strong>' + source.discovery_source + '</strong>: ';
			for (var t = 0; t < source.ids.length; t++) {
				if (t > 0) {
					text += ', ';
				}
				if(source.ids[t].staging_rows && Object.keys(source.ids[t].staging_rows).length > 1){
					text += source.ids[t].id;
					text += ' [ ' + this._buildStagingTableLink(source.ids[t].staging_rows) + '  ]';
				}else if(source.ids[t].staging_rows && Object.keys(source.ids[t].staging_rows).length === 1 && source.ids[t].staging_rows[Object.keys(source.ids[t].staging_rows)[0]].length > 0){
					var tableName = Object.keys(source.ids[t].staging_rows)[0];
					text += '<a href="' + this._createTableHref(tableName, source.ids[t].staging_rows[tableName])  + '">' + source.ids[t].id + '</a>';
				}else{
					text += source.ids[t].id;
				}
			}
			mainUL.push(text);
		}
		return formReport.build();
	},



	//Internal Functions

	_getGlideRecordWithId: function (id) {
		var configItemGr = new GlideRecord("cmdb_ci");
		if (configItemGr.get(id)) {
			return configItemGr;
		}
	},

	_getReferenceField: function (columnName, configItemGr) {
		var returnObj = {};
		if (columnName) {
			returnObj.id = configItemGr.getValue(columnName);
			returnObj.displayValue = configItemGr.getDisplayValue(columnName);
		}
		return returnObj;
	},

	_getSources: function () {
		var sources = [];
		var obj = {};
		var stagingRowSourceM2M = new SGCEnhanceImportRowToSource();
		var sourceGr = new GlideRecord('sys_object_source');
		sourceGr.addQuery('target_sys_id', this.sysId);
		//sourceGr.addNotNullQuery('source_feed');
		sourceGr.orderByDesc('last_scan');
		sourceGr.query();
		while(sourceGr.next()){
			var sourceName = sourceGr.getValue('name');
			var sourceFeed = sourceGr.getValue('source_feed');
			var sourceId = sourceGr.getValue('id');
			if (!obj[sourceName]) {
				obj[sourceName] = {
					staging_rows: {}
				};
			}
			if (!obj[sourceName][sourceId]) {
				obj[sourceName][sourceId] = {
					id: sourceId,
					last_scan: sourceGr.last_scan.getDisplayValue(),
					staging_rows: {}//stagingRowSourceM2M.findStagingRows(sourceId, sourceName)
				};
			}
			if(sourceFeed){
				var sourceFeedDetails = this._getSourceFeedDetails(sourceFeed);
				//if(Object.keys(obj[sourceName][sourceId].staging_rows).length < 1){
				if((sourceFeedDetails) && !obj[sourceName][sourceId].staging_rows[sourceFeedDetails.staging_table]){
					obj[sourceName][sourceId].staging_rows[sourceFeedDetails.staging_table] = [];
					// Do a new index
					if(sourceFeedDetails && sourceFeedDetails.staging_table && !obj[sourceName].staging_rows[sourceFeedDetails.staging_table]){
						obj[sourceName].staging_rows[sourceFeedDetails.staging_table] = this._findStagingRows(sourceFeedDetails.staging_table);
						if(obj[sourceName].staging_rows[sourceFeedDetails.staging_table].length > 0){
							var query = 'sys_idIN' + obj[sourceName].staging_rows[sourceFeedDetails.staging_table].toString();
							stagingRowSourceM2M.indexSpecificImportSetRowTargets(sourceFeedDetails.staging_table, query);
						}
					}
				}
			}
			
			var stagingRows =stagingRowSourceM2M.findStagingRows(sourceId, sourceName);
			for(var stagingTable in stagingRows){
				obj[sourceName][sourceId].staging_rows[stagingTable] = stagingRows[stagingTable];
			}
			
		}
		
		for (var discovery_source in obj) {
			var sourceObj = {
				discovery_source: discovery_source,
				ids: []
			};
			for (var id in obj[discovery_source]) {
				if(id != 'staging_rows'){
					sourceObj.ids.push(obj[discovery_source][id]);
				}
			}
			sources.push(sourceObj);
		}
		gs.debug((JSON.stringify(sources)));
		return sources;
	},



	_getSourceFeedDetails: function(sourceFeed){
		var transformDefinitionGr = new GlideRecord('cmdb_inst_application_feed');
		if (transformDefinitionGr.get('name', sourceFeed)) {
			var feedObj = {};
			feedObj.name = transformDefinitionGr.getValue('name');
			feed_id = transformDefinitionGr.getUniqueValue();
			feedObj.staging_table = transformDefinitionGr.sys_data_source.import_set_table_name + '';
			feedObj.data_in_single_column = transformDefinitionGr.sys_data_source.data_in_single_column + '' === 'true';
			return feedObj;
		}
	},

	_buildStagingTableLink: function(stagingRows){
		var txt = '';
		var addCommas = false;
		for(var tableName in stagingRows){
			var href = this._createTableHref(tableName, stagingRows[tableName]);
			var link = '';
			if(stagingRows[tableName].length > 0){
				link += '<a href="' + href + '">' + tableName + '</a>';
			}else{
				link += tableName;
			}
			
			if(addCommas){
				txt += ', ';
			}
			addCommas = true;
			txt += link;

		}
		return txt;
	},

	_createTableHref: function(tableName, sysIds){
			var href = tableName + '_list.do?sysparm_query=sys_idIN';
			for(var i = 0; i < sysIds.length; i++){
				var rowSysId = sysIds[i];
				if(i != 0){
					href  += ',';
				}
				href += rowSysId;
			}
			return href;
	},

	_findStagingRows: function(sourceTableName){
		var firstRunContext = '';
		var tempRunContext = '';
		var runTableName = '';
		var stagingRows = [];
		var rowLimit = 50;
		var ireOutboundTargetsGr = new GlideRecord('cmdb_ire_output_target_item');
		ireOutboundTargetsGr.addQuery('target_record_id', this.sysId);
		ireOutboundTargetsGr.orderByDesc('sys_created_on');
		ireOutboundTargetsGr.query();
		while (ireOutboundTargetsGr.next()) {
			var runId = ireOutboundTargetsGr.getValue('run_id');
			if(firstRunContext && runId != firstRunContext){
				break;
			}
			if(tempRunContext != runId){
				tempRunContext = runId;
				runTableName = this._getImportSetRunTable(runId);
			}
			if(runTableName === sourceTableName){
				firstRunContext = runId;
				stagingRows.push(ireOutboundTargetsGr.getValue('source_record_id'));
			}
			if(stagingRows.length >= 50){
				break;
			}
		}
		return stagingRows;
	},


	_getImportSetRunTable: function(runId){
		var importSetRunGr = new GlideRecord('sys_import_set_run');
		if(importSetRunGr.get(runId)){
			return importSetRunGr.set.table_name + '';
		}
	},

/* 
	randomHash: function(type) {
        var input = this.randomString(256);
        var digest = new GlideDigest();
        switch (type) {
            case "sha256":
                return digest.getSHA256Hex(input).toLowerCase();
            case "sha1":
                return digest.getSHA1Hex(input).toLowerCase();
            case "md5":
            default:
                return digest.getMD5Hex(input).toLowerCase();
        }
    },
*/
	type: 'SGCEnhanceConfigurationItem'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-27 18:34:58</sys_created_on>
        <sys_id>6fd7cd1047a62110acb08f22736d4312</sys_id>
        <sys_mod_count>189</sys_mod_count>
        <sys_name>SGCEnhanceConfigurationItem</sys_name>
        <sys_package display_value="SGC Enhancement Suite" source="x_156954_sgc_enhan">8d8f28c647c16110acb08f22736d433f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SGC Enhancement Suite">8d8f28c647c16110acb08f22736d433f</sys_scope>
        <sys_update_name>sys_script_include_6fd7cd1047a62110acb08f22736d4312</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2024-05-22 12:27:45</sys_updated_on>
    </sys_script_include>
</record_update>
