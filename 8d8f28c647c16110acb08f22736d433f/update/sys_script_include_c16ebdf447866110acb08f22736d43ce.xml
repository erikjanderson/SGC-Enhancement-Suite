<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_156954_sgc_enhan.SGCEnhanceImportSummary</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Compiles summaries of import set run making it easier to debug and understand where source data is being transformed to.</description>
        <name>SGCEnhanceImportSummary</name>
        <script><![CDATA[var SGCEnhanceImportSummary = Class.create();
SGCEnhanceImportSummary.prototype = {
	initialize: function () { },


	getSummary: function (importSetRun) {
		//Creating import summary through a scripted API endpoint is required because only scripted rest resources have access to the StreamWriter Object which allows us to create larger attachments.
		var request = new sn_ws.RESTMessageV2();
		request.setHttpTimeout(600000);
		// request.setRequestHeader('X-UserToken', gs.getSession().getSessionToken());
		// request.setRequestHeader('Cookie', 'JSESSIONID=' + gs.getSessionID() + ';');
		request.setAuthenticationProfile('basic', this._getAuthProfile());
		request.setEndpoint(gs.getProperty('glide.servlet.uri').replace(/\/$/, "") + '/api/x_156954_sgc_enhan/sgc_enhance/get_import_summary');
		request.setQueryParameter('import_set_run', importSetRun.sysId);
		request.setHttpMethod('GET');
		request.setRequestHeader("Accept", "application/json");
		request.saveResponseBodyAsAttachment('sys_import_set_run', importSetRun.sysId, importSetRun.importSet.displayValue + ' Import Summary (' + importSetRun.number + ').csv');
		request.executeAsync();
	},

	//Internal Functions

	_report: function (importSetRunSysId, streamWriter) {
		var importSetRunGr = new GlideRecord('sys_import_set_run');
		if (importSetRunGr.get(importSetRunSysId.toString())) {
			this._getImportSetSummaryGlideQuery(importSetRunGr, streamWriter);
			//this._reportCSV(reportArray, streamWriter);
		}
	},


	_reportCSV: function (reportArray, streamWriter) {
		if (!reportArray || !Array.isArray(reportArray) || !reportArray[0] || !streamWriter) {
			return;
		}
		var csv = new SGCEnhanceCSV(streamWriter);
		//Create headers
		var sample = reportArray[0];
		for (var key in sample) {
			if (key === 'ire_outputs') {
				continue;
			}
			csv.addHeader(key);
		}
		//Add rest of headers;
		csv.addHeader('target_table', 'actual_table', 'operation', 'target_display', 'target_record', 'target_link', 'error', 'warning');

		for (var i = 0; i < reportArray.length; i++) {
			var sourceObj = reportArray[i];
			for (var o = 0; o < sourceObj.ire_outputs.length; o++) {
				var ireOutput = sourceObj.ire_outputs[o];
				var mergedObj = this._mergeObjects(sourceObj, ireOutput);
				csv.addRow(mergedObj);
			}
		}
		csv.build();
	},


	_reportImportSetRun: function (importSetRunGr) {
		var reportArray = [];
		var stagingTable = importSetRunGr.set.table_name + '';
		var importSetSysId = importSetRunGr.getValue('set');
		var importSetRowGr = new GlideRecord(stagingTable);
		importSetRowGr.addQuery('sys_import_set', importSetSysId);
		importSetRowGr.orderBy('sys_import_row');
		importSetRowGr.query();
		while (importSetRowGr.next()) {
			var sourceObj = this._reportStagingRow(importSetRowGr);
			sourceObj.ire_outputs = this._getIREOutputs(importSetRowGr, importSetRunGr);
			reportArray.push(sourceObj);
		}
		return reportArray;
	},

	_reportStagingRow: function (importSetRowGr) {
		var sourceObj = {};
		sourceObj.row_number = parseInt(importSetRowGr.getValue('sys_import_row')) || 0;
		for (var columnName in importSetRowGr) {
			if (columnName.startsWith('sys_') || columnName === 'template_import_log' || columnName === 'import_set_run') {
				continue;
			}
			sourceObj[columnName] = importSetRowGr.getValue(columnName) || '';
		}
		return sourceObj;
	},

	_getIREOutputs: function (importSetRowGr, importSetRunGr) {
		var ireOutputs = [];
		if (!importSetRowGr) {
			gs.warn('SGC Enhancement Suite (SGCEnhanceImportSummary._getIREOutputs): No import set row defined.');
			return;
		}
		var importSetRunSysId;
		if (importSetRunGr) {
			importSetRunSysId = importSetRunGr.getUniqueValue();
		}
		var ireOutputGr = new GlideRecord('cmdb_ire_output_target_item');
		ireOutputGr.orderByDesc('sys_created_on');
		ireOutputGr.addQuery('source_record_id', importSetRowGr.getUniqueValue());
		if (importSetRunSysId) {
			ireOutputGr.addQuery('run_id', importSetRunSysId);
		}
		ireOutputGr.query();
		while (ireOutputGr.next()) {
			if (!importSetRunSysId) {
				importSetRunSysId = ireOutputGr.getValue('run_id');
			}
			if (importSetRunSysId != ireOutputGr.getValue('run_id')) {
				break;
			}
			var ireOutputObj = {};
			ireOutputObj.target_record = ireOutputGr.getValue('target_record_id');
			ireOutputObj.target_table = ireOutputGr.getValue('expected_target_table');
			ireOutputObj.actual_table = ireOutputGr.getValue('actual_target_table');
			ireOutputObj.operation = ireOutputGr.getDisplayValue('operation');

			var targetGr = this._getTargetRecordGr(ireOutputObj.target_record, ireOutputObj.actual_table);
			if (targetGr) {
				ireOutputObj.target_display = targetGr.getDisplayValue();
				ireOutputObj.target_link = targetGr.getLink();
			}


			ireOutputObj.error = ireOutputGr.getValue('error_detail') || '';
			ireOutputObj.warning = ireOutputGr.getValue('warning_detail') || '';
			ireOutputs.push(ireOutputObj);
		}
		return ireOutputs;
	},

	_getImportSetSummaryGlideQuery: function (importSetRunGr, streamWriter) {
		var stagingTable = importSetRunGr.set.table_name + '';
		var importSetSysId = importSetRunGr.getValue('set');
		var columnArray = this._getStagingColumns(stagingTable);
		columnArray.unshift('sys_import_row');
		var headerStr = '';
		for (var i = 0; i < columnArray.length; i++) {
			if (i > 0) {
				headerStr += ','
			}
			headerStr += '"' + columnArray[i] + '"';
		}
		headerStr += (',"target_table","actual_table","operation","target_display","target_record","target_link","error","warning"')
		streamWriter.writeString(headerStr);
		new global.GlideQuery(stagingTable)
			.where('sys_import_set', importSetSysId)
			.orderBy('sys_import_row')
			.select(columnArray)
			.map(function (stagingRow) {
				var sysId = stagingRow.sys_id
				var sourceObj = stagingRow;
				delete sourceObj.sys_id;
				sourceObj.ire_outputs = [];
				new global.GlideQuery('cmdb_ire_output_target_item')
					.orderByDesc('sys_created_on')
					.where('source_record_id', sysId)
					.select('target_record_id', 'target_record_id$DISPLAY', 'expected_target_table', 'actual_target_table', 'operation$DISPLAY', 'error_detail', 'warning_detail')
					.forEach(function (ireOutput) {

						// if(!gs.nil(ireOutput.target_record_id$DISPLAY)){
						// 	var match = ireOutput.target_record_id$DISPLAY.match(/:(.*)/);
						// 	if(match && match[1]){
						// 		ireOutput.target_record_id$DISPLAY = match[1].trim();
						// 	}
						// }

						var ireOutputObj = {
							"target_table": ireOutput.expected_target_table,
							"actual_table": ireOutput.actual_target_table,
							"operation": ireOutput.operation$DISPLAY,
							"target_display": ireOutput.target_record_id$DISPLAY,
							"target_record": ireOutput.target_record_id,
							"target_link": ireOutput.actual_target_table + ".do?sys_id=" + ireOutput.target_record_id,
							"error": ireOutput.error_detail,
							"warning": ireOutput.warning_detail
						}
						sourceObj.ire_outputs.push(ireOutputObj);
					})
				return sourceObj
			}).forEach(function (sourceObj) {
				for (var i = 0; i < sourceObj.ire_outputs.length; i++) {
					var rowString = '\n';
					var first = true;
					for (column in sourceObj) {
						if (column === 'ire_outputs') {
							continue;
						}
						if (!first) {
							rowString += ',';
						}
						first = false;
						rowString += this._buildCell(sourceObj[column]);
					}
					var ireOutput = sourceObj.ire_outputs[i]
					for (var ireAttribute in ireOutput) {
						rowString += ',' + this._buildCell(ireOutput[ireAttribute]);
					}
					streamWriter.writeString(rowString);
				}
			}.bind(this));
	},

	_buildCell: function (val) {
		if (!gs.nil(val) && typeof val === 'object') {
			val = JSON.stringify(val);
		}
		if (typeof val === 'string') {
			val = val.replace(/"/g, '""');
		}
		if(gs.nil(val)){
			val = "";
		}
		val = '"' + val + '"';
		
		return val;
	},

	_getStagingColumns: function (stagingTable) {
		var columnArray = [];
		new global.GlideQuery("sys_dictionary")
			.where('name', stagingTable)
			.whereNotNull('element')
			.select('element')
			.forEach(function (column) {
				if (!column.element.startsWith('sys_')) {
					columnArray.push(column.element)
				}
			})
		return columnArray;
	},



	_getTargetRecordGr: function (targetSysId, targetTable) {
		if (!targetSysId || !targetTable) {
			return;
		}

		var targetGr = new GlideRecord(targetTable);
		if (targetGr.get(targetSysId)) {
			return targetGr;
		}
	},





	_mergeObjects: function (obj1, obj2) {
		var returnObj = {};
		for (var key1 in obj1) {
			returnObj[key1] = obj1[key1];
		}

		for (var key2 in obj2) {
			returnObj[key2] = obj2[key2];
		}

		return returnObj;
	},

	_getAuthProfile: function () {
		var userName = 'sgc_enhance_api_user';
		var userGr = new GlideRecord('sys_user');
		if (userGr.get('user_name', userName)) {
			//API User already set up and we can return the auth profile.
			return 'aac92872473d4690d299a9f8536d4310';
		} else {
			var returnObj = this._createServiceAccount(userName, 'SGC Enhancment Suite', 'API User');
			if (returnObj && returnObj.randomPassword) {
				//Update Basic auth profile
				var basicAuthProfileGr = new GlideRecord('sys_auth_profile_basic');
				if (basicAuthProfileGr.get('aac92872473d4690d299a9f8536d4310')) {
					basicAuthProfileGr.setValue('username', userName);
					basicAuthProfileGr.password.setDisplayValue(returnObj.randomPassword);
					basicAuthProfileGr.update();
					return 'aac92872473d4690d299a9f8536d4310';
				}
			}
		}
	},

	_createServiceAccount: function (user_name, first_name, last_name) {
		var returnObj = {
			userId: '',
			randomPassword: ''
		};
		var userGr = new GlideRecord('sys_user');
		if (userGr.get('user_name', user_name)) {
			returnObj.userId = userGr.getUniqueValue();
		} else {
			returnObj.randomPassword = GlideSecureRandomUtil.getSecureRandomString(100);
			userGr.initialize();
			userGr.setValue('user_name', user_name);
			userGr.setValue('first_name', first_name);
			userGr.setValue('last_name', last_name);
			userGr.setValue('web_service_access_only', true);
			userGr.user_password.setDisplayValue(returnObj.randomPassword);
			returnObj.userId = userGr.insert();

			this._addRoleToUser(returnObj.userId, 'x_156954_sgc_enhan.internal_api_access');

		}
		return returnObj;
	},

	_addRoleToUser: function (userId, roleName) {
		var roleId = this._getRole(roleName);
		gs.info(roleId);
		if (!roleId || !userId) {
			return;
		}
		var rolesGr = new GlideRecord('sys_user_has_role');
		rolesGr.addQuery('role', roleId);
		rolesGr.addQuery('user', userId);
		rolesGr.query();
		if (!rolesGr.next()) {
			rolesGr.initialize();
			rolesGr.user = userId;
			rolesGr.role = roleId;
			rolesGr.insert();
		}
	},

	_getRole: function (roleName) {
		var rGr = new GlideRecord('sys_user_role');
		if (rGr.get('name', roleName)) {
			return rGr.getUniqueValue();
		}
	},

	type: 'SGCEnhanceImportSummary'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-04-04 15:21:46</sys_created_on>
        <sys_id>c16ebdf447866110acb08f22736d43ce</sys_id>
        <sys_mod_count>170</sys_mod_count>
        <sys_name>SGCEnhanceImportSummary</sys_name>
        <sys_package display_value="SGC Enhancement Suite" source="x_156954_sgc_enhan">8d8f28c647c16110acb08f22736d433f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SGC Enhancement Suite">8d8f28c647c16110acb08f22736d433f</sys_scope>
        <sys_update_name>sys_script_include_c16ebdf447866110acb08f22736d43ce</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2024-05-10 14:34:39</sys_updated_on>
    </sys_script_include>
</record_update>
