<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_156954_sgc_enhan.SGCEnhanceTransformPreview</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>You can leverage this script incude from your CMDB Integration Studio Application Data Source [cmdb_inst_application_feed] (AKA the robust transform definition).&#13;
&#13;
PREVIEW ONLY&#13;
1. Check the "Execute Before Script" property on the form.&#13;
2. In the Before Script, populate the function with the following code which will execute this transform preview. Also by default it will automatically set the import set row to "Skipped" so that no actual CMDB updates are applied.&#13;
&#13;
     new x_156954_sgc_enhan.SGCEnhanceTransformPreview().previewBatch(input, runId);&#13;
&#13;
3. After running an import, you can review the Import Preview Result table to understand how your CMDB data would be imported into ServiceNow after transformation.&#13;
&#13;
&#13;
PROCESS AND PREVIEW&#13;
1. &#13;
&#13;
&#13;
</description>
        <mobile_callable>false</mobile_callable>
        <name>SGCEnhanceTransformPreview</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var SGCEnhanceTransformPreview = Class.create();
SGCEnhanceTransformPreview.prototype = {
	initialize: function () {

	},

	/**
	 * Preview a single batch of staging table data.
	 * Automatically skips the row data so that they are not processed through the IRE later.
	 * 
	 * @param (object) input: The array where each element of the input array is an object. Each object contains a status, reason, and payload
	 * @param (runId) runId: The current import set run id
	 */
	previewBatch: function (input, runId) {
		gs.debug("[DEBUG] SGCEnhanceTransformPreview (previewBatch) input:  " + input);
		var { discoverySource, inputPayload, itemIndexTrackerDictionary, relationIndexTrackerDictionary } = this._preProcessInputPayload(input);
		gs.debug("[DEBUG] SGCEnhanceTransformPreview (previewBatch) this.inputPayload" + JSON.stringify(inputPayload));
		var output = this._simulateIRE(inputPayload, discoverySource);
		if (!gs.nil(output)) {
			var outputPayload = JSON.parse(output);
			gs.debug("[DEBUG] SGCEnhanceTransformPreview (previewBatch) output:  " + JSON.stringify(outputPayload));
			var internalIdPreviewDictionary = this._processOutputItems(inputPayload, outputPayload.items, itemIndexTrackerDictionary, runId, this._searchForInputData);
			this._processOutputRelationItems(inputPayload, outputPayload.relations, internalIdPreviewDictionary, relationIndexTrackerDictionary, runId)
		}
	},

	processOutput: function (input, output, runId) {
		if (gs.nil(input) || gs.nil(output) || gs.nil(runId)) {
			return;
		}

		//Process items


		//Process relations

	},


	/**
	 * Queries for all Import Set Preview records that do not have have an associated import set row.
	 */
	processUncorrelatedImportPreviewResults: function () {
		var importSetRunDictionary = {};
		var importPreviewResultGr = new GlideRecord("x_156954_sgc_enhan_import_preview_result");
		importPreviewResultGr.addEncodedQuery("import_set_row=NULL");
		importPreviewResultGr.orderBy("sys_created_on");
		importPreviewResultGr.query();
		while (importPreviewResultGr.next()) {
			var importSetRunId = importPreviewResultGr.getValue("import_set_run");
			if (
				gs.nil(importSetRunDictionary[importSetRunId]) &&
				(!gs.nil(importPreviewResultGr.import_set_run.set + ""))
			) {
				importSetRunDictionary[importSetRunId] = {};
				importSetRunDictionary[importSetRunId].importSetSysId = importPreviewResultGr.import_set_run.set + "";
				importSetRunDictionary[importSetRunId].robustImportSetTransformerSysId = importPreviewResultGr.import_set_run.sys_robust_transformer + "";
				//importSetRunDictionary[importSetRunId].stagingTable = importPreviewResultGr.import_set_run.set.target_table + "";
			}
			if (gs.nil(importSetRunDictionary[importSetRunId])) {
				continue;
			}
			var importSetRowGr = new GlideRecord("sys_import_set_row");
			importSetRowGr.addQuery("sys_import_set", importSetRunDictionary[importSetRunId].importSetSysId);
			importSetRowGr.addQuery("sys_import_state_comment", importPreviewResultGr.getValue("row_bind"));
			importSetRowGr.setLimit(1);
			importSetRowGr.query();
			if (importSetRowGr.next()) {
				importPreviewResultGr.import_set_row = importSetRowGr.getUniqueValue();
				importPreviewResultGr.import_set = importSetRowGr.getValue("sys_import_set");
				importPreviewResultGr.sys_robust_import_set_transformer = importSetRunDictionary[importSetRunId].robustImportSetTransformerSysId;

				importPreviewResultGr.update();
			}
		}
	},

	//Internal Function
	/**
	 * Using the input and output payload items reviews the IRE output to sumarize the results of compared to the inputs and generate import preview result records.
	 * 
	 * @param (object) inputPayload: The IRE input payload object that was originally submitted.
	 * @param (array) outputPayloadItems: The array of output items returned from the IRE after submitting the input payload.
	 * @param (object) 
	 */
	_processOutputItems: function (inputPayload, outputPayloadItems, indexTrackerDictionary, runId, getInputDataFunction, internalIdPreviewDictionary, rowBind, relatesToSysId) {
		if (gs.nil(inputPayload) || gs.nil(outputPayloadItems)) {
			return;
		}
		if(gs.nil(internalIdPreviewDictionary)){
			internalIdPreviewDictionary = {};
		}
		var isRelated = false;
		if (rowBind) {
			isRelated = true;
		}
		outputPayloadItems.forEach(outputItem => {
			var inputIndices = outputItem.inputIndices;
			if (gs.nil(rowBind)) {
				rowBind = indexTrackerDictionary[inputIndices[0]].rowBind;
			}

			var {inputValues, sourceNativeKeys, internalIds} = getInputDataFunction(inputPayload, inputIndices);
			for (var key in inputValues) {
				inputValues[key] = inputValues[key].join(",");
			}

			var importPreviewResult = new GlideRecord("x_156954_sgc_enhan_import_preview_result");
			importPreviewResult.initialize();
			importPreviewResult.row_bind = rowBind;
			importPreviewResult.import_set_run = runId;
			//importPreviewResult.sys_robust_import_set_transformer = this.robustImportSetTransformerSysId;
			importPreviewResult.target_table = outputItem.className;
			importPreviewResult.target_record = outputItem.sysId === "Unknown" ? "" : outputItem.sysId;
			importPreviewResult.operation = outputItem.operation;
			importPreviewResult.values = JSON.stringify(inputValues);
			importPreviewResult.source_native_keys = sourceNativeKeys.join("\n");
			var { identificationLogs, matchingLookupTable } = this._getIdentificationLogs(outputItem);
			importPreviewResult.identification_logs = identificationLogs;
			importPreviewResult.matching_lookup_table = matchingLookupTable;
			importPreviewResult.error_logs = this._parseLogs(outputItem.errors);
			importPreviewResult.warning_logs = this._parseLogs(outputItem.warnings);
			importPreviewResult.relates_to = relatesToSysId;
			var sysId = importPreviewResult.insert();

			if(internalIds){
				internalIds.forEach(internalId => {
					internalIdPreviewDictionary[internalId] = sysId;
				});
			}
			//Process nested related items
			if (outputItem.relatedItems && outputItem.relatedItems.length > 0) {
				this._processOutputItems(inputPayload, outputItem.relatedItems, indexTrackerDictionary, runId, this._getRelatedInputData, internalIdPreviewDictionary, rowBind, sysId);
			}
			if (isRelated == false) {
				rowBind = null;
			}
			//Return a dictionary of all input internal ids and which output preview records contributed to them.
			
		});

		return internalIdPreviewDictionary;

	},

	_processOutputRelationItems: function (inputPayload, outputRelations, internalIdPreviewDictionary, relationIndexTrackerDictionary, runId) {
		gs.info("TEST: " + JSON.stringify(internalIdPreviewDictionary))
		if (gs.nil(inputPayload) || gs.nil(outputRelations)) {
			return;
		}
		outputRelations.forEach(relation => {
			var inputIndices = relation.inputIndices;
			var rowBind = relationIndexTrackerDictionary[inputIndices[0]].rowBind;

			var {parentPreviewSysId, childPreviewSysId, relType} = this._getRelationshipInputData(inputPayload, inputIndices, internalIdPreviewDictionary);
			var importPreviewResult = new GlideRecord("x_156954_sgc_enhan_import_preview_result");
			importPreviewResult.initialize();
			importPreviewResult.row_bind = rowBind;
			importPreviewResult.import_set_run = runId;
			//importPreviewResult.sys_robust_import_set_transformer = this.robustImportSetTransformerSysId;
			importPreviewResult.target_table = relation.className;
			importPreviewResult.target_record = relation.sysId === "Unknown" ? "" : relation.sysId;
			importPreviewResult.operation = relation.operation;
			importPreviewResult.rel_parent_preview = parentPreviewSysId;
			importPreviewResult.rel_child_preview = childPreviewSysId;
			importPreviewResult.rel_type = relType;
			importPreviewResult.error_logs = this._parseLogs(relation.errors);
			importPreviewResult.warning_logs = this._parseLogs(relation.warnings);
			importPreviewResult.insert();
		});
		
		
	},

	/**
	 * Given the location information searches the input payload for the input payload value data and the source native key data that was submitted to the IRE.
	 * 
	 * @param (object) inputPayload: The input payload that was submitted to the IRE.
	 * @param (object) inputData: The JSON object item values that were submitted and need to be captured.
	 * @param (object) sourceNativeKeyDict: The JSON object with the Source Native Key values that need to be captured from the target items.
	 * @param (integer) mainIndex: The primary index location of th einput payload. This value is specified in the inputIndicies array in the IRE output payload
	 * @param (integer) subIndex: The secondary index location of related data. THis value is specified in the relatedData array for each related item in the IRE output payload.
	 */

	_searchForInputData: function (inputPayload, indices) {
		var inputData = {
			inputValues: {},
			sourceNativeKeys: [],
			internalIds: []
		};
		if (gs.nil(indices) || gs.nil(inputPayload)) {
			return inputData
		}
		indices.forEach(mainIndex => {
			if (inputPayload.items[mainIndex]) {
				var item = inputPayload.items[mainIndex];
				if (!gs.nil(item.sys_object_source_info) && !gs.nil(item.sys_object_source_info.source_native_key) && inputData.sourceNativeKeys.indexOf(item.sys_object_source_info.source_native_key) < 0) {
					inputData.sourceNativeKeys.push(item.sys_object_source_info.source_native_key);
				}
				Object.keys(item.values).forEach(key => {
					if (gs.nil(inputData.inputValues[key])) {
						inputData.inputValues[key] = [];
					}
					if (inputData.inputValues[key].indexOf(item.values[key]) < 0) {
						inputData.inputValues[key].push(item.values[key]);
					}
				});
			}
			inputData.internalIds.push(item.internal_id);
		});
		return inputData
	},

	_getRelatedInputData: function (inputPayload, indices) {
		var inputData = {
			inputValues: {},
			sourceNativeKeys: [],
			internalIds: []
		};
		if (gs.nil(inputPayload) || gs.nil(indices)) {
			return inputData;
		}
		
		indices.forEach(index => {
			if (inputPayload.items[index.mainIndex]) {
				var mainItem = inputPayload.items[index.mainIndex];
				var item = null;
				if (!gs.nil(mainItem.lookup) && mainItem.lookup[index.subIndex]) {
					item = mainItem.lookup[index.subIndex];
				} else if (!gs.nil(mainItem.related) && mainItem.related[index.subIndex]) {
					item = mainItem.related[index.subIndex];
				}
				if (!gs.nil(item.sys_object_source_info) && !gs.nil(item.sys_object_source_info.source_native_key) && inputData.sourceNativeKeys.indexOf(item.sys_object_source_info.source_native_key) < 0) {
					inputData.sourceNativeKeys.push(item.sys_object_source_info.source_native_key);
				}
				Object.keys(item.values).forEach(key => {
					if (gs.nil(inputData.inputValues[key])) {
						inputData.inputValues[key] = [];
					}
					if (inputData.inputValues[key].indexOf(item.values[key]) < 0) {
						inputData.inputValues[key].push(item.values[key]);
					}
				});
				inputData.internalIds.push(item.internal_id);
			}
		})
		return inputData;
	},


	_getRelationshipInputData: function(inputPayload, indices, internalIdPreviewDictionary){
		var inputData = {
			parentPreviewSysIds: [],
			childPreviewSysId: [],
			relType: ""
		};
		if (gs.nil(inputPayload) || gs.nil(indices)) {
			return inputData;
		}
		//Technically yes the data model supports multiple input indices but its almost 100% unlikely base on how transforms are built in the ETL.
		//#Trust
		indices.forEach(index => {
			if (inputPayload.relations[index]){
				inputData.parentPreviewSysId = internalIdPreviewDictionary[inputPayload.relations[index].parent_id];
				inputData.childPreviewSysId = internalIdPreviewDictionary[inputPayload.relations[index].child_id];
				inputData.relType = inputPayload.relations[index].type;
			}
		});
		return inputData;
	},


	/**
	 * Extracts the identification logs from a item in the IRE output payload
	 * 
	 * @param (object) outputItem: A single item in the IRE output payload 
	 */
	_getIdentificationLogs: function (outputItem) {
		var identificationLogs = "";
		var matchingLookupTable = "";
		if (!gs.nil(outputItem.identificationAttempts)) {
			outputItem.identificationAttempts.forEach((attempt, i) => {
				if (i > 0) { identificationLogs += "\n"; }
				identificationLogs += attempt.attemptResult + " searched on " + attempt.searchOnTable + " with: " + attempt.attributes.join(",");
				if (attempt.attemptResult == "MATCHED") {
					matchingLookupTable = attempt.searchOnTable;
				}
			});
		}
		return { "identificationLogs": identificationLogs, "matchingLookupTable": matchingLookupTable };
	},

	/**
	 * Extracts logging information from either the warnings or errors  log information for individual items in the IRE Output payload
	 */
	_parseLogs: function (logsArray) {
		var logs = "";
		if (!gs.nil(logsArray)) {
			logsArray.forEach((log, i) => {
				if (i > 0) { logs += "\n\n"; }
				logs += log.error + ": " + log.message.replace(/'([^']*)'/, (match, group) => {
					try {
						var json = JSON.parse(group);
						var pretty = JSON.stringify(json, null, 4);
						return `\n${pretty}\n`;
					} catch (e) {
						return match;
					}
				});

			});
		}
		return logs;
	},


	setRunDetails: function (runId) {
		var importSetRunGr = new GlideRecord("sys_import_set_run");
		if (importSetRunGr.get(runId)) {

			for (var key in importSetRunGr) {
				//gs.info("TEST: " + key + ": " + importSetRunGr.getValue("key"));
			}
		}
	},

	/**
	 * Executes the identifyCIEnhanced IRE API and returns an an IRE ouput payload.
	 * 
	 * @param (object) payload: The IRE Input payload
	 * @param (string) discoverySource: the discovery source to submit to the IRE along with the payload.
	 */
	_simulateIRE: function (payload, discoverySource) {
		//Defaults
		var options = {
			"deduplicate_payloads": true,
			"generate_summary": false,
			"partial_commits": true,
			"partial_payloads": true,
			"skip_updating_last_scan_to_now": false,
			"skip_updating_source_last_discovered_to_now": false
		};

		var inputPayloadStr = JSON.stringify(payload);
		var output = sn_cmdb.IdentificationEngine.identifyCIEnhanced(discoverySource, inputPayloadStr, options);
		return output;
	},


	/**
	 * Preprocesses the input data provided from the robust transform into a single IRE payload. 
	 * Also returns an index tracker object so you can keep track of the original row / item the new payload item came from.
	 * 
	 * @param (object) input: The array where each element of the input array is an object. Each object contains a status, reason, and payload
	 */
	_preProcessInputPayload: function (input) {
		//Convert weird class object to a string. No JSON.stringify doesn't work.
		var returnObject = {
			discoverySource: "",
			itemIndexTrackerDictionary: [],
			relationIndexTrackerDictionary: [],
			inputPayload: {
				items: [],
				relations: [],
				referenceItems: []
			},
		};

		var strInput = input + "";
		var inputCopy = JSON.parse(strInput);
		//Concatenate all of the payloads from input into a single payload. This way we are only needing to submit a single call to the IRE per batch.
		inputCopy.forEach((row, r) => {
			//Always skip the row since this is for preview purposes only and we don't want to write to the CMDB right now.
			input[r].status = "SKIPPED";
			var rowBindingGUID = gs.generateGUID();
			input[r].reason = rowBindingGUID;
			row.payload.items.forEach((item, i) => {
				if (gs.nil(returnObject.discoverySource) && item.sys_object_source_info && item.sys_object_source_info.sys_object_source) {
					returnObject.discoverySource = item.sys_object_source_info.sys_object_source;
				}
				returnObject.inputPayload.items.push(item);
				returnObject.itemIndexTrackerDictionary[returnObject.inputPayload.items.length - 1] = {
					"rowIndex": r,
					"itemIndex": i,
					"rowBind": rowBindingGUID
				};
			});
			if (row.payload.relations && row.payload.relations.length > 0) {
				row.payload.relations.forEach((relation, i) => {
					returnObject.inputPayload.relations.push(relation);
					returnObject.relationIndexTrackerDictionary[returnObject.inputPayload.relations.length - 1] = {
						"rowIndex": r,
						"itemIndex": i,
						"rowBind": rowBindingGUID
					};
				});
			}
			if (row.payload.referenceItems && row.payload.referenceItems.length > 0) {
				returnObject.inputPayload.referenceItems = returnObject.inputPayload.referenceItems.concat(row.payload.referenceItems);
			}
		});

		return returnObject;
	},

	type: 'SGCEnhanceTransformPreview'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>erik.anderson</sys_created_by>
        <sys_created_on>2025-07-01 17:01:07</sys_created_on>
        <sys_id>df50842883ae6210b2bde360ceaad3e2</sys_id>
        <sys_mod_count>145</sys_mod_count>
        <sys_name>SGCEnhanceTransformPreview</sys_name>
        <sys_package display_value="SGC Enhancement Suite" source="x_156954_sgc_enhan">8d8f28c647c16110acb08f22736d433f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SGC Enhancement Suite">8d8f28c647c16110acb08f22736d433f</sys_scope>
        <sys_update_name>sys_script_include_df50842883ae6210b2bde360ceaad3e2</sys_update_name>
        <sys_updated_by>erik.anderson</sys_updated_by>
        <sys_updated_on>2025-07-09 02:27:33</sys_updated_on>
    </sys_script_include>
</record_update>
